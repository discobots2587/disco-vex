#pragma config(Motor,  port2,           middleRight,   tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port3,           middleLeft,    tmotorVex393, openLoop)
#pragma config(Motor,  port4,           backRight,     tmotorVex393, openLoop)
#pragma config(Motor,  port5,           backLeft,      tmotorVex393, openLoop)
#pragma config(Motor,  port6,           armMotorRight, tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port7,           armMotorLeft,  tmotorVex393, openLoop)
#pragma config(Motor,  port8,           spinMotorRight, tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port9,           spinMotorLeft, tmotorVex393, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "Vex_Competition_Includes.c"

void pre_auton()
{
}

task autonomous()
{
	//Red Side Front
	/*
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	motor[port6] = 127;
	motor[port7] = 127;
	wait1Msec(1400);
	motor[port6] = 0;
	motor[port7] = 0;
	//move forward and raise arms
	motor[port2]= -127;
	motor[port3]= -127;
	motor[port4]= -127;
	motor[port5]= -127;
	wait1Msec(800);
	//move back
	motor[port2]= -127;
	motor[port3]= 127;
	motor[port4]= -127;
	motor[port5]= 127;
	wait1Msec(700);
	//turn right (to get straight again)
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(1400);
	//move forward
	motor[port2]= 127;
	motor[port3]= -127;
	motor[port4]= 127;
	motor[port5]= -127;
	wait1Msec(700);
	//Turn left
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(1000);
	//go forward to push balls off
	//*/

	//Red Side Back
	/*
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(1400);
	//move forward
	motor[port2]= 127;
	motor[port3]= -127;
	motor[port4]= 127;
	motor[port5]= -127;
	wait1Msec(700);
	//turn left (to get straight again)
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(800);
	//move forward to push balls off
	//*/

	//Blue Side Front
	/*
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	motor[port6] = 127;
	motor[port7] = 127;
	wait1Msec(1400);
	motor[port6] = 0;
	motor[port7] = 0;
	//move forward and raise arms
	motor[port2]= -127;
	motor[port3]= -127;
	motor[port4]= -127;
	motor[port5]= -127;
	wait1Msec(800);
	//move back
	motor[port2]= 127;
	motor[port3]= -127;
	motor[port4]= 127;
	motor[port5]= -127;
	wait1Msec(700);
	//turn left (to get straight again)
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(1400);
	//move forward
	motor[port2]= -127;
	motor[port3]= 127;
	motor[port4]= -127;
	motor[port5]= 127;
	wait1Msec(700);
	//Turn right
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(1000);
	//go forward to push balls off
	//*/

	//Blue Side Back
	/*
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(1400);
	//move forward
	motor[port2]= -127;
	motor[port3]= 127;
	motor[port4]= -127;
	motor[port5]= 127;
	wait1Msec(700);
	//turn right (to get straight again)
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	wait1Msec(800);
	//move forward
	//*/


	//Programming Skills
	
	motor[port2]= 127;
	motor[port3]= 127;
	motor[port4]= 127;
	motor[port5]= 127;
	motor[port6] = 127;
	motor[port7] = 127;
	wait1Msec(1400);
	motor[port6] = 0;
	motor[port7] = 0;
	//move forward and raise arms
	motor[port2]= -127;
	motor[port3]= -127;
	motor[port4]= -127;
	motor[port5]= -127;
	wait1Msec(800);
	//move back
	for(int i = 0; i<3; i++)
	{
		motor[port2]= -127;
		motor[port3]= 127;
		motor[port4]= -127;
		motor[port5]= 127;
		wait1Msec(700);
		//turn right (to get straight again)
		motor[port2]= 127;
		motor[port3]= 127;
		motor[port4]= 127;
		motor[port5]= 127;
		wait1Msec(1400);
		//move forward
		motor[port2]= 127;
		motor[port3]= -127;
		motor[port4]= 127;
		motor[port5]= -127;
		wait1Msec(700);
		//Turn left
		motor[port2]= 127;
		motor[port3]= 127;
		motor[port4]= 127;
		motor[port5]= 127;
		wait1Msec(1000);
		//go forward to push balls off
		motor[port2]= -127;
		motor[port3]= -127;
		motor[port4]= -127;
		motor[port5]= -127;
		wait1Msec(800);
		//move back
	}
	motor[port2]= -127;
	motor[port3]= -127;
	motor[port4]= -127;
	motor[port5]= -127;
	wait1Msec(2500);
	//move back
	motor[port2]= 127;
	motor[port3]= -127;
	motor[port4]= 127;
	motor[port5]= -127;
	wait1Msec(550);
	//Turn left
	//*/
}

task usercontrol()
{
while(true)
{
	motor[port2]= vexRT[Ch2]; //middleRight
	motor[port3]= vexRT[Ch3]; //middleLeft
	motor[port4]= vexRT[Ch2]; //backRight
	motor[port5]= vexRT[Ch3]; //backLeft
	motor[port6]= vexRT[Ch5]; //armMotor
	motor[port7]= vexRT[Ch5]; //armMotor
	motor[port8]= vexRT[Ch6]; //spinMotor
	motor[port9]= vexRT[Ch6]; //spinMotor

	if(vexRT[Btn5U] == 1)   // if button 5u is pressed...
	{
		motor[port6] = 127; // raise the arm.
		motor[port7] = 127;
	}
	else
	{
		if(vexRT[Btn5D] == 1) // Else if button 5D is pressed...
		{
			motor[port6] = -127; // lower the arm.
			motor[port7] = -127;
		}
		else
			motor[port6] = 0;
			motor[port7] = 0;
	}

	if(vexRT[Btn6U] == 1)		//if button 6U is pressed...
	{
		motor[port8] = 127;		//Spinners spin accordingly
		motor[port9] = 127;
	}
	else
	{
		if(vexRT[Btn6D] == 1) //Else if button 6D is pressed...
		{
			motor[port8] = -127; // Spinners spin backwards
			motor[port9] = -127;
		}
		else
			motor[port8] = 0;
			motor[port9] = 0;
		}
	}
}
